/**
 * Tcss 342
 * @author Yicong Yang
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;


public class HashDict {
	private static final double LF = 0.8;
	private static final String FILE = "words2.txt";
	private List<Dict>[] myTable;
	private int size;
	private int load;
	private int coll;
	private int totalcoll;
	private long startmy;
	private long startori;
	private long endmy;
	private long endori;
	private HashMap<String, Dict> oriMap;

	public HashDict() {
		size = 5;
		load = 0;
		coll = 0;
		totalcoll = 0;
		myTable = creatingNewTable(size);
		oriMap = new HashMap<>();
		readinOri();
		readin();
		
	}
	
	public void get(String get) {
		Dict find = new Dict(get);
		if (myTable[find.hashCode()%size].size() > 0) {
			System.out.print(myTable[find.hashCode()%size].get(0).getMyKey() + " ");
			System.out.print(myTable[find.hashCode()%size].size() + " ");
			for (int i = 0; i < myTable[find.hashCode()%size].size(); i ++) {
				System.out.print(myTable[find.hashCode()%size].get(i).getMyValue() + " ");
			}
			System.out.println();
		} else {
			System.out.println("Key not found!");
		}
		
	}

	public void find(String a) {
		Dict find = new Dict(a);
		if(myTable[find.hashCode()%size].contains(find)) {
			System.out.println("find " + a + " at Key: " 
					+ myTable[find.hashCode()%size].get(0).getMyKey());
		} else {
			System.out.println("Word " + a + " not found!");
		}
	}

	public void output() {
		String filename = "Output.txt";
		try {
			PrintWriter outputstream = new PrintWriter(filename);
			for(int i = 0; i < myTable.length; i++){
				Dict[] a = myTable[i].toArray(new Dict[myTable[i].size()]);
				if (a.length > 0) {
					outputstream.printf("%s %d ", a[0].getMyKey(), a.length);
				}
				for(int j = 0; j < myTable[i].size(); j++){
					outputstream.printf("%s, ", a[j].getMyValue());
				}
				outputstream.println();
			}
			outputstream.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	private void readinOri() {
		startori = System.currentTimeMillis();
		File in = new File(FILE);
		try {
			Scanner temp = new Scanner(in);
			while (temp.hasNext()) {
				String a = temp.nextLine().toLowerCase();
				Dict tempD = new Dict(a);
				oriMap.put(tempD.getMyKey(), tempD);				
			}
			temp.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		endori = System.currentTimeMillis();
		System.out.println("Final Time Result for original hashtable: " + (endori - startori) + " ms");
	}
	private void readin() {
		startmy = System.currentTimeMillis();
		File in = new File(FILE);
		try {
			Scanner temp = new Scanner(in);
			while (temp.hasNext()) {
				String a = temp.nextLine().toLowerCase();
				Dict tempD = new Dict(a);
				if (((double)load)/size > LF) {
					//System.out.printf("Total collision for size %d: %d load: %d\n",size ,coll ,load);
					rehashing();
					coll = 0;
				}
				if (myTable[tempD.hashCode()%size].size() > 0) {
					coll ++;
					totalcoll ++;
				}
				myTable[tempD.hashCode()%size].add(tempD);
				load ++;
			}
			temp.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		endmy = System.currentTimeMillis();
		System.out.println("Final time result for my hash table: " + (endmy - startmy) + " ms");
		System.out.println("Total collision (Encluding all collision in all size and collision in rehashing): "
				+ "" + totalcoll + " load: " + load + " size: " + size);
	}
	private List<Dict>[] creatingNewTable(int theSize) {
		List<Dict>[] temp = (List<Dict>[]) new List[theSize];
		for (int i = 0; i < theSize; i ++) {
			temp[i] = new LinkedList<Dict>();
		}
		return temp;
	}
	private void rehashing() {
		coll = 0;
		size = findNextPrime(2 * size);
		List<Dict>[] temp = creatingNewTable(size);
		for (int i = 0; i < myTable.length; i ++) {
			for (Dict t : myTable[i]) {
				Dict t2 = new Dict(t.getMyValue());
				if (temp[t2.hashCode()%size].size() > 0) {
					coll ++;
					totalcoll ++;
				}
				temp[t.hashCode()%size].add(t2);
			}
		}
		//System.out.printf("\nAfter rehashing Total collision for size %d: %d load: %d\n",size ,coll ,load);
		myTable = temp;
	}
	private int findNextPrime (int a) {
		boolean isPrime = false;
	    for (int i = a; i < 2 * a && !isPrime; i ++ ) {
	    	a = a + 1;
	    	boolean ip = true;
	    	// go with your regular prime checking routine
	    	for (int j = 2; j < a && ip; j++) {
	            if (a % j == 0) {
	                ip = ip && false;
	            } else {
	            	ip = ip && true;
	            }
	        }
	    	isPrime = ip;
	    }
	    return a;
	}
}
